interview_questions_data = {
    "dsa": {
        "title": "Data Structures & Algorithms",
        "questions": [
            {"q": "What is a Linked List? Explain its types and applications.", "a": "A linked list is a linear data structure where elements are not stored at contiguous memory locations. Each element (node) stores a pointer/reference to the next node. Types include Singly (nodes point forward), Doubly (nodes point forward and backward), and Circular Linked Lists. Applications: implementing stacks/queues, dynamic memory allocation, polynomial representation, symbol tables in compilers, image viewers (previous/next).", "youtube_link": "https://www.youtube.com/watch?v=5Yh-0275BBA (freeCodeCamp.org - Data Structures and Algorithms playlist, search for Linked List)"},
            {"q": "Difference between Array and Linked List.", "a": "Arrays: Store elements in contiguous memory (cache-friendly), fixed size (or dynamically resized but costly), O(1) random access by index, O(N) for insertions/deletions in middle. Linked Lists: Elements scattered in memory, dynamic size, O(N) for random access (traverse from head), O(1) for insertions/deletions (if pointer known), more memory overhead due to pointers.", "youtube_link": "https://www.youtube.com/watch?v=KLJmJ6v6Rno (GeeksforGeeks - Array vs Linked List)"},
            {"q": "What is the time complexity of various sorting algorithms?", "a": "Common sorting algorithm complexities:\n- Bubble Sort: O(n^2)\n- Selection Sort: O(n^2)\n- Insertion Sort: O(n^2) (worst/average), O(n) (best)\n- Merge Sort: O(n log n)\n- Quick Sort: O(n log n) (average), O(n^2) (worst)\n- Heap Sort: O(n log n)\n- Radix Sort / Counting Sort: O(nk) (can be O(N) for specific data and range).", "youtube_link": "https://www.youtube.com/watch?v=kPRA0W1kECg (freeCodeCamp.org - Data Structures and Algorithms playlist, search for Sorting Algorithms)"},
            {"q": "Explain BFS and DFS. When to use which?", "a": "BFS (Breadth-First Search): Explores all neighbor nodes at the current depth level before moving to the next. Uses a queue. Best for finding shortest paths on unweighted graphs, or when you need to find something close to the source.\nDFS (Depth-First Search): Explores as far as possible along each branch before backtracking. Uses a stack (or recursion). Best for cycle detection, topological sorting, or when you need to visit all nodes/edges, or path finding in general.", "youtube_link": "https://www.youtube.com/watch?v=pcKY4cFDNvs (HackerRank - BFS & DFS)"},
            {"q": "What is a Binary Search Tree (BST)? What are its properties and operations?", "a": "A Binary Search Tree (BST) is a node-based binary tree data structure with the following properties:\n1. The left subtree of a node contains only nodes with keys lesser than the node’s key.\n2. The right subtree of a node contains only nodes with keys greater than the node’s key.\n3. The left and right subtree each must also be a binary search tree.\n4. There must be no duplicate nodes. \nOperations: Search, Insertion, Deletion, Min/Max. Time complexity is O(log N) on average for balanced trees, O(N) in worst case (skewed tree).", "youtube_link": "https://www.youtube.com/watch?v=o0M4zYQeQ0k (freeCodeCamp.org - BST Tutorial)"},
            {"q": "Hash Map vs. Hash Table vs. Dictionary. What's the difference?", "a": "Often used interchangeably, but conceptually:\n- **Hash Table:** The underlying data structure that implements a hash map. It's an array combined with a hash function.\n- **Hash Map:** An abstract data type (ADT) that stores key-value pairs. It uses a hash table for efficient lookup.\n- **Dictionary:** Python's built-in concrete implementation of a hash map/hash table. It's a concrete data structure providing key-value storage. They all offer O(1) average time complexity for insertions, deletions, and lookups, but worst-case O(N) due to collisions.", "youtube_link": "https://www.youtube.com/watch?v=NDV4Y5J-P-I (Simplilearn - Hash Map vs Hash Table)"},
            {"q": "Explain dynamic programming with an example (e.g., Fibonacci).", "a": "Dynamic Programming (DP) is an optimization technique used to solve complex problems by breaking them down into smaller overlapping subproblems and storing the solutions to these subproblems to avoid recomputation. It's often used for optimization problems.\nExample: Fibonacci sequence (iterative approach using DP to store previous results), Knapsack Problem, Longest Common Subsequence.\nFib(n) = Fib(n-1) + Fib(n-2). Instead of recomputing Fib(n-1) and Fib(n-2) multiple times, store them in an array/map once computed.", "youtube_link": "https://www.youtube.com/watch?v=oBt53YbR9Kk (freeCodeCamp.org - Dynamic Programming for Beginners)"},
            {"q": "What is a Graph? Explain different representations (Adjacency Matrix, Adjacency List).", "a": "A graph is a non-linear data structure consisting of nodes (vertices) and edges (connections between nodes). Used to model networks, social connections, etc. Representations:\n- **Adjacency Matrix:** A 2D array where `matrix[i][j]` is 1 if there's an edge from i to j, 0 otherwise. Good for dense graphs, O(V^2) space. Quick check for edge existence.\n- **Adjacency List:** An array of lists/vectors where `list[i]` contains all vertices adjacent to vertex i. Good for sparse graphs, O(V+E) space. Efficient for iterating through neighbors.", "youtube_link": "https://www.youtube.com/watch?v=F0f-lB6c27M (GeeksforGeeks - Graph Representations)"},
            {"q": "Explain Big O notation with examples.", "a": "Big O notation describes the upper bound of an algorithm's running time or space requirements as the input size grows. It expresses the worst-case scenario and helps compare algorithm efficiency.\n- O(1): Constant time (e.g., accessing array element by index).\n- O(log N): Logarithmic time (e.g., binary search).\n- O(N): Linear time (e.g., traversing a list).\n- O(N log N): Linearithmic time (e.g., merge sort, quicksort average).\n- O(N^2): Quadratic time (e.g., nested loops, bubble sort).\n- O(2^N): Exponential time (e.g., recursive Fibonacci without memoization, brute-force solutions for NP-hard problems).", "youtube_link": "https://www.youtube.com/watch?v=v4cd1O4zkGw (freeCodeCamp.org - Big O Notation)"},
            {"q": "Explain Trees (Binary Tree, AVL, Red-Black).", "a": "Trees are hierarchical data structures. A **Binary Tree** is a tree where each node has at most two children. **Binary Search Tree (BST)** adds ordering. **AVL Trees** and **Red-Black Trees** are self-balancing BSTs that ensure O(log N) worst-case time for operations by automatically rebalancing after insertions/deletions. AVL is strictly balanced; Red-Black offers looser balance with simpler rotations.", "youtube_link": "https://www.youtube.com/watch?v=qM2J_y6F_8c (freeCodeCamp.org - Binary Tree Tutorial)\nhttps://www.youtube.com/watch?v=i_N7jM2E-R0 (GeeksforGeeks - AVL Tree)\nhttps://www.youtube.com/watch?v=qvz1XwX0NYM (GeeksforGeeks - Red Black Tree)"}
        ]
    },
    "os": {
        "title": "Operating Systems",
        "questions": [
            {"q": "What is a Deadlock? Explain the four necessary conditions for deadlock to occur and how to prevent it.", "a": "A deadlock is a situation where two or more processes are blocked indefinitely, waiting for each other to release resources that they are holding. The four necessary conditions are:\n1. **Mutual Exclusion:** Resources cannot be shared simultaneously.\n2. **Hold and Wait:** A process holding at least one resource is waiting to acquire additional resources held by other processes.\n3. **No Preemption:** Resources cannot be forcibly taken from a process.\n4. **Circular Wait:** A set of processes are waiting for resources in a circular fashion.\nPrevention strategies involve negating one of these conditions (e.g., requiring all resources at once, resource ordering, resource preemption).", "youtube_link": "https://www.youtube.com/watch?v=KjY_wK73R60 (Neso Academy - Deadlock)"},
            {"q": "Explain different types of CPU scheduling algorithms with pros and cons.", "a": "CPU scheduling algorithms determine which process gets the CPU when. Common types:\n- **FCFS (First-Come, First-Served):** Simplest, non-preemptive. Pros: Easy. Cons: High average waiting time, convoy effect.\n- **SJF (Shortest Job First):** Optimal average waiting time. Cons: Difficult to know burst time in advance, starvation.\n- **Priority Scheduling:** Processes with higher priority run first. Pros: Good for critical tasks. Cons: Starvation (solved with aging).\n- **Round Robin:** Preemptive, time-sliced. Each process gets a fixed time quantum. Pros: Fair, good for time-sharing. Cons: High context-switching overhead with small quantum.", "youtube_link": "https://www.youtube.com/watch?v=F0S12PkyLwA (Neso Academy - CPU Scheduling)"},
            {"q": "What is Virtual Memory? What are its advantages and how does paging work?", "a": "Virtual memory is a memory management technique that allows the execution of processes that are not entirely in main memory. It separates user logical memory from physical memory. Advantages: Allows programs larger than physical memory, higher CPU utilization, efficient memory sharing, memory protection. **Paging:** Divides logical memory into fixed-size blocks (pages) and physical memory into same-sized blocks (frames). A page table maps logical addresses to physical addresses.", "youtube_link": "https://www.youtube.com/watch?v=wG9Yc0uO54k (Neso Academy - Virtual Memory)"},
            {"q": "Explain Process vs. Thread. What are the advantages of using threads?", "a": "**Process:** An independent execution unit with its own separate memory space, open files, and resources. Process switching is heavyweight.\n**Thread:** A lightweight unit of execution within a process. Threads within the same process share the same memory space, code, and data. Thread switching is lightweight. Advantages: Increased responsiveness, faster context switching, resource sharing, and improved scalability on multi-core processors, less resource consumption.", "youtube_link": "https://www.youtube.com/watch?v=Wd_d1G2J4q0 (Neso Academy - Processes & Threads)"},
            {"q": "What is a Semaphore? What is a Mutex?", "a": "**Semaphore:** A signaling mechanism. It's an integer variable (or abstract data type) that is accessed only through two standard atomic operations: `wait()` (decrement, block if 0) and `signal()` (increment, unblock if possible). Used for synchronization and controlling access to common resources. Can be counting or binary. \n**Mutex (Mutual Exclusion):** A locking mechanism used to protect shared resources by ensuring that only one thread can access the resource at a time. It grants exclusive access. A mutex is essentially a binary semaphore (value 0 or 1). Mutexes are for mutual exclusion, semaphores are for signaling and resource counting.", "youtube_link": "https://www.youtube.com/watch?v=jpv_D6n-pBw (Neso Academy - Semaphores and Mutex)"},
            {"q": "What is a system call?", "a": "A system call is the programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. It provides an interface between a process and the operating system. Examples: `fork()`, `exec()`, `read()`, `write()`, `open()`, `close()`. They allow user-level programs to interact with hardware and protected system resources.", "youtube_link": "https://www.youtube.com/watch?v=zJ_lQf_uOqM (Neso Academy - System Calls)"}
        ]
    },
    "dbms": {
        "title": "Database Management Systems (DBMS)",
        "questions": [
            {"q": "What is normalization in DBMS? Explain 1NF, 2NF, and 3NF.", "a": "Normalization is the process of organizing the columns and tables of a relational database to minimize data redundancy and improve data integrity. It aims to reduce data anomalies (insertion, update, deletion).\n- **1NF (First Normal Form):** Each column must contain atomic (indivisible) values; no repeating groups of columns.\n- **2NF (Second Normal Form):** Must be in 1NF, and all non-key attributes must be fully functionally dependent on the primary key (no partial dependencies).\n- **3NF (Third Normal Form):** Must be in 2NF, and there are no transitive dependencies (non-key attributes should not depend on other non-key attributes).", "youtube_link": "https://www.youtube.com/watch?v=y3_JvU-sM6g (Neso Academy - Normalization)"},
            {"q": "Explain ACID properties in DBMS with examples.", "a": "ACID properties ensure reliable processing of database transactions:\n- **Atomicity:** All-or-nothing principle. A transaction either completes entirely or has no effect. (e.g., money transfer: deduct from A AND add to B, or neither).\n- **Consistency:** A transaction brings the database from one valid state to another. Data integrity rules are maintained. (e.g., total balance remains same after transfer).\n- **Isolation:** Concurrent transactions appear to run sequentially. Intermediate states are not visible to other transactions. (e.g., two transfers simultaneously won't interfere).\n- **Durability:** Once committed, a transaction remains permanent, even after system failures. (e.g., committed transfer is permanent despite power loss).", "youtube_link": "https://www.youtube.com/watch?v=H74S-qW4u2Y (Neso Academy - ACID Properties)"},
            {"q": "Difference between SQL and NoSQL databases. When to use which?", "a": "**SQL Databases (Relational):** Table-based, structured, use SQL, vertically scalable. Pros: Strong consistency (ACID), clear schema, good for complex joins. Cons: Less schema flexibility, harder horizontal scaling. Use when: structured data, clear relationships, high data integrity needed (e.g., banking, e-commerce transactions).\n**NoSQL Databases (Non-relational):** Flexible schemas (document, key-value, graph, column-family), horizontally scalable, often prioritize availability/partition tolerance (BASE). Pros: High scalability, flexible schema, good for unstructured data. Cons: Eventual consistency, less support for complex joins. Use when: large unstructured data, high velocity data, high scalability/availability (e.g., social media feeds, IoT, real-time analytics).", "youtube_link": "https://www.youtube.com/watch?v=WAD5z_7oH_Q (Tech With Tim - SQL vs NoSQL)"},
            {"q": "What is a primary key? What is a foreign key?", "a": "**Primary Key:** A column or set of columns in a table that uniquely identifies each row. It must be unique and non-NULL. It's used to establish relationships with other tables.\n**Foreign Key:** A column or set of columns in one table that refers to the primary key in another table. It establishes a link (relationship) between two tables and helps maintain referential integrity (ensuring relationships between tables remain consistent).", "youtube_link": "https://www.youtube.com/watch?v=KzV4EaA-eBw (Neso Academy - Primary Key & Foreign Key)"},
            {"q": "What are indexes in a database? What are their advantages and disadvantages?", "a": "Indexes are special lookup tables that the database search engine can use to speed up data retrieval. They are like an index in a book, pointing directly to the data's location. Advantages: Faster data retrieval (SELECT queries), improved query performance for `WHERE`, `ORDER BY`, `JOIN` clauses. Disadvantages: Slower data modification (INSERT, UPDATE, DELETE) as indexes also need to be updated, consume disk space, and add overhead if too many are created or on frequently updated columns.", "youtube_link": "https://www.youtube.com/watch?v=ZfOq7Q5p_3s (Hussein Nasser - Database Indexing Explained)"},
            {"q": "Explain Joins in SQL (INNER, LEFT, RIGHT, FULL).", "a": "Joins are used to combine rows from two or more tables based on a related column between them.\n- **INNER JOIN:** Returns records that have matching values in both tables.\n- **LEFT (OUTER) JOIN:** Returns all records from the left table, and the matching records from the right table. If no match, NULLs for right side.\n- **RIGHT (OUTER) JOIN:** Returns all records from the right table, and the matching records from the left table. If no match, NULLs for left side.\n- **FULL (OUTER) JOIN:** Returns all records when there is a match in either left or right table.", "youtube_link": "https://www.youtube.com/watch?v=TRaQ5F1a7iY (freeCodeCamp.org - SQL Course, search for Joins)"}
        ]
    },
    "networks": {
        "title": "Computer Networks",
        "questions": [
            {"q": "Explain the OSI Model. What are the functions of each layer?", "a": "The OSI (Open Systems Interconnection) model is a conceptual framework that standardizes the functions of a telecommunication or computing system into seven abstraction layers:\n1. **Physical Layer (Bits):** Physical transmission (cables, Wi-Fi).\n2. **Data Link Layer (Frames):** Error-free data transfer between nodes (MAC addresses).\n3. **Network Layer (Packets):** Logical addressing and routing across networks (IP addresses).\n4. **Transport Layer (Segments/Datagrams):** End-to-end connection, reliability (TCP) or unreliability (UDP), flow control (port numbers).\n5. **Session Layer (Data):** Establishes, manages, terminates sessions.\n6. **Presentation Layer (Data):** Data translation, encryption, compression, formatting.\n7. **Application Layer (Data):** Provides network services to user apps (HTTP, FTP, SMTP, DNS).", "youtube_link": "https://www.youtube.com/watch?v=vv4y_rsK3Yw (Simplilearn - OSI Model)"},
            {"q": "Difference between TCP and UDP. When to use each?", "a": "**TCP (Transmission Control Protocol):** Connection-oriented, reliable, ordered, error-checked, flow/congestion control. Slower due to overhead. Used for: web Browse (HTTP), email (SMTP), file transfer (FTP), where data integrity is critical.\n**UDP (User Datagram Protocol):** Connectionless, unreliable (best-effort), unordered, minimal overhead. Faster. Used for: streaming media (video/audio), DNS lookups, online gaming, VoIP, where speed is critical and some data loss is acceptable.", "youtube_link": "https://www.youtube.com/watch?v=qc9f0L3nQ_c (Tech With Tim - TCP vs UDP)"},
            {"q": "What is DNS? How does it work?", "a": "DNS (Domain Name System) translates human-readable domain names (e.g., google.com) into numerical IP addresses (e.g., 142.250.190.46) that computers use. When you type a URL, your computer queries DNS servers (recursive resolver -> root -> TLD -> authoritative) to find the corresponding IP address, allowing your browser to connect to the correct server.", "youtube_link": "https://www.youtube.com/watch?v=72snZCTHJLA (Code with Mosh - How DNS Works)"},
            {"q": "Explain IP addressing (IPv4 vs IPv6) and Subnetting.", "a": "**IP Address:** Numerical label identifying a device on a network.\n**IPv4:** 32-bit addresses (e.g., 192.168.1.1), about 4.3 billion unique addresses. Depleting.\n**IPv6:** 128-bit addresses (e.g., 2001:0db8::8a2e:0370:7334), vastly more addresses, designed to replace IPv4.\n**Subnetting:** Dividing a large network into smaller, more efficient subnetworks. Improves security, optimizes IP address usage, and reduces traffic by dividing the host portion of an IP address.", "youtube_link": "https://www.youtube.com/watch?v=Fj7n0_t-BwE (freeCodeCamp.org - IPv4 vs IPv6)\nhttps://www.youtube.com/watch?v=K8K_GgTj2u4 (Eli the Computer Guy - What is Subnetting?)"},
            {"q": "What is a Firewall? What are its types?", "a": "A firewall is a network security system that monitors and controls incoming and outgoing network traffic based on predetermined security rules. It acts as a barrier between a trusted internal network and untrusted external networks. Types:\n- **Packet-filtering:** Examines packets based on IP address, port, protocol.\n- **Stateful inspection:** Tracks active connections and makes decisions based on context.\n- **Proxy:** Acts as an intermediary, filtering at the application layer.\n- **Next-generation (NGFW):** Combines traditional functions with deep packet inspection, intrusion prevention, etc.", "youtube_link": "https://www.youtube.com/watch?v=Nn1l7X1N5G4 (Simplilearn - What is a Firewall?)"},
            {"q": "What is HTTP vs HTTPS?", "a": "**HTTP (Hypertext Transfer Protocol):** The foundation for data communication on the World Wide Web. It's stateless and unencrypted, meaning data sent over HTTP can be intercepted and read.\n**HTTPS (Hypertext Transfer Protocol Secure):** The secure version of HTTP. It uses SSL/TLS (Secure Sockets Layer/Transport Layer Security) to encrypt the communication between the client and server, protecting data from eavesdropping and tampering. Essential for sensitive data like logins and payments.", "youtube_link": "https://www.youtube.com/watch?v=yYJ4hY_j1qY (Fireship - HTTP vs HTTPS in 100 Seconds)"}
        ]
    },
    "oop_concepts": {
        "title": "Object-Oriented Programming (General)",
        "questions": [
            {"q": "What are the four pillars of OOP? Explain each with a simple analogy.", "a": "The four fundamental principles of OOP are:\n1. **Encapsulation:** Bundling data (attributes) and methods that operate on the data within a single unit (class), and restricting direct access to some components. Analogy: A car's engine is encapsulated; you interact with pedals and steering, not individual spark plugs.\n2. **Inheritance:** A mechanism where a new class (subclass/child) inherits attributes and methods from an existing class (superclass/parent), promoting code reuse. Analogy: A child inherits traits from parents but also develops unique characteristics.\n3. **Polymorphism:** 'Many forms'. Allows objects of different classes to be treated as objects of a common superclass, often through method overriding. Analogy: A 'play' button might play music in one app, video in another, but it's still 'play'.\n4. **Abstraction:** Hiding complex implementation details and showing only essential features. Analogy: A TV remote abstracts the complex internal circuitry of the TV into simple buttons like 'power' and 'volume up'.", "youtube_link": "https://www.youtube.com/watch?v=pYg8PjYmNqU (Mosh Hamedani - OOP Explained)"},
            {"q": "Explain method overloading and method overriding. Provide examples (conceptual if language-specific).", "a": "**Method Overloading:** (Not natively supported in Python in the traditional sense, but achieved through default args/`*args`/`**kwargs` in Python; common in Java/C#) When a class has multiple methods with the same name but different parameters (number, type, or order of arguments). The compiler/interpreter decides which method to call based on the arguments provided.\n*Conceptual Java Example:* `add(int a, int b)` vs `add(double a, double b)`.\n**Method Overriding:** When a subclass provides a specific implementation for a method that is already defined in its superclass. The method must have the same name and parameters as the superclass method. This is a key aspect of polymorphism.\n*Python Example:*\n```python\nclass Animal:\n    def speak(self):\n        return 'Animal makes a sound'\n\nclass Dog(Animal):\n    def speak(self):\n        return 'Woof!' # Overrides Animal's speak()\n```", "youtube_link": "https://www.youtube.com/watch?v=KzV4EaA-eBw (Simplilearn - Method Overloading vs Overriding)"},
            {"q": "What is an Interface? What is an Abstract Class?", "a": "**Interface:** (More prominent in Java/C#; Python uses 'Abstract Base Classes' or 'Protocols' for similar concepts) A blueprint of a class. It defines a set of methods that a class *must* implement if it 'implements' that interface. Interfaces enforce a contract for behavior. They cannot be instantiated. All methods in an interface are typically abstract (no implementation).\n**Abstract Class:** A class that cannot be instantiated directly and typically contains one or more abstract methods (methods declared but not implemented). Subclasses must implement these abstract methods. Abstract classes can have both concrete (implemented) and abstract methods, and can have constructors and member variables. They provide a common base for related subclasses.", "youtube_link": "https://www.youtube.com/watch?v=1F_A_wPjPys (GeeksforGeeks - Abstract Class vs Interface)"}
        ]
    },
    "system_design": {
        "title": "System Design",
        "questions": [
            {"q": "What is Load Balancing? Why is it used in system design?", "a": "Load balancing is the process of distributing incoming network traffic evenly across multiple servers. It ensures no single server is overworked, improving application availability, responsiveness, and scalability. It prevents bottlenecks, handles traffic spikes, and provides high availability through redundancy and failover mechanisms. Types include DNS load balancing, hardware/software load balancers, and proxy load balancing.", "youtube_link": "https://www.youtube.com/watch?v=LqKj-x9oIuI (System Design Interview - Load Balancers)"},
            {"q": "Explain Caching. What are different caching strategies?", "a": "Caching is a technique to store frequently accessed data in a temporary, faster storage location (cache) so that future requests can be served more quickly. It reduces latency, increases throughput, and reduces the load on the main data source. Strategies:\n- **Cache Aside:** Application manages caching (e.g., check cache, if not found, fetch from DB and store).\n- **Write Through:** Data written to cache and database simultaneously.\n- **Write Back:** Data written only to cache, then asynchronously written to DB.\n- **Read Through:** Cache library itself fetches data from DB if not in cache.\n- **Refresh Ahead:** Cache proactively refreshes data before it's explicitly requested.", "youtube_link": "https://www.youtube.com/watch?v=N_p9c7N8j1Y (ByteByteGo - Caching Explained)"},
            {"q": "What is a CDN (Content Delivery Network)?", "a": "A CDN is a geographically distributed network of proxy servers and their data centers. The goal of a CDN is to provide high availability and performance by distributing content spatially relative to end-users. It caches static content (images, CSS, JS, videos) at 'edge locations' closer to users, reducing latency and bandwidth consumption from the origin server, and improving load times globally.", "youtube_link": "https://www.youtube.com/watch?v=Bq3C2s3HqQ4 (Cloudflare - What is a CDN?)"},
            {"q": "Explain Monolithic vs. Microservices Architecture. When to choose each?", "a": "**Monolithic:** A single, large, tightly coupled codebase. Pros: Simple to develop/deploy initially. Cons: Hard to scale specific parts, slow development, difficult to maintain, single point of failure. Choose for: Small, simple applications, early-stage startups.\n**Microservices:** Application broken into small, independent, loosely coupled services. Pros: High scalability, flexibility, fault isolation, faster development cycles, polyglot persistence/language. Cons: Increased complexity (deployment, monitoring, inter-service communication, distributed transactions). Choose for: Large, complex applications, need for high scalability and independent deployments, large teams.", "youtube_link": "https://www.youtube.com/watch?v=oVd1C16Uo7Q (ThoughtWorks - Monolith vs Microservices)"},
            {"q": "What is Database Sharding (Horizontal Partitioning)?", "a": "Database sharding (or horizontal partitioning) is a method of distributing a single logical dataset across multiple database instances (shards). Each shard holds a portion of the data, and each can be hosted on a separate database server. This allows databases to scale horizontally to handle larger data volumes and higher transaction throughput than a single server could. Sharding strategies include range-based, hash-based, and directory-based sharding.", "youtube_link": "https://www.youtube.com/watch?v=C7m8Wk41H1c (ByteByteGo - Database Sharding)"},
            {"q": "How do you handle rate limiting in a system design?", "a": "Rate limiting controls the number of requests a user or client can make to a server within a certain time window. Used to prevent abuse (DDoS attacks, brute-force), ensure fair resource usage, and protect APIs. Common algorithms: Token Bucket, Leaky Bucket, Fixed Window Counter, Sliding Window Log, Sliding Window Counter. Implementation can be at API Gateway, load balancer, or application layer.", "youtube_link": "https://www.youtube.com/watch?v=W0S3Qj6Z95g (System Design Interview - Rate Limiter)"}
        ]
    },
    "hr_questions": {
        "title": "HR Interview Questions",
        "questions": [
            {"q": "Tell me about yourself.", "a": "Keep it concise (2-3 minutes) and relevant. Structure it as Present-Past-Future: Start with your current role and responsibilities, then briefly mention key experiences/achievements from your past that led you here, and finally, articulate what you're looking for in your next role and how this opportunity aligns with your career goals. Focus on professional qualities and achievements.", "youtube_link": "https://www.youtube.com/watch?v=H74S-qW4u2Y (Andrew LaCivita - Tell Me About Yourself)"},
            {"q": "Why do you want to work for our company?", "a": "Show you've done your research. Talk about specific aspects of the company (products, services, mission, values, recent achievements, company culture) that genuinely appeal to you. Connect these back to your skills, values, and career aspirations. Avoid generic answers like 'good salary' or 'stable company.'", "youtube_link": "https://www.youtube.com/watch?v=vJ04J2hYfys (The Companies Expert - Why do you want to work here?)"},
            {"q": "What are your greatest strengths?", "a": "Choose 2-3 strengths that are most relevant to the job description. For each strength, provide a specific, concise example of how you've demonstrated it in a professional context. Use the STAR method (Situation, Task, Action, Result). Examples: problem-solving, teamwork, adaptability, strong technical skills, communication, leadership.", "youtube_link": "https://www.youtube.com/watch?v=y3_JvU-sM6g (CareerVidz - What are your strengths?)"},
            {"q": "What are your greatest weaknesses?", "a": "Choose a genuine weakness that is not a critical requirement for the job. Frame it positively: describe how you are actively working to improve it and what steps you've taken. Show self-awareness and a growth mindset. Avoid clichés like 'I'm a perfectionist' unless you have a compelling, genuine story. Example: 'I used to struggle with public speaking, so I joined Toastmasters and now actively seek opportunities to present, which has significantly improved my confidence.'", "youtube_link": "https://www.youtube.com/watch?v=1F_A_wPjPys (CareerVidz - What are your weaknesses?)"},
            {"q": "Where do you see yourself in 5 years?", "a": "Show ambition and a desire for growth, but also align your goals with the opportunities within the company. Express a desire to learn, grow, and take on more responsibility, contributing significantly to the company's success. Avoid mentioning specific job titles unless you've thoroughly researched the company's career paths. Do not say 'running my own company' or 'working for a competitor.'", "youtube_link": "https://www.youtube.com/watch?v=r0R0Yj3_0Jk (The Companies Expert - Where do you see yourself in 5 years?)"},
            {"q": "Why should we hire you?", "a": "This is your summary pitch. Clearly and concisely articulate your unique value proposition. Highlight your most relevant skills, experiences, and accomplishments that directly address the job requirements and the company's needs. Emphasize how you can solve their problems or contribute to their goals more effectively than other candidates. Be confident and specific.", "youtube_link": "https://www.youtube.com/watch?v=oc_j0n32N4o (CareerVidz - Why should we hire you?)"},
            {"q": "How do you handle pressure or stressful situations?", "a": "Provide a specific example (STAR method) where you faced pressure and handled it effectively. Focus on your coping mechanisms: staying calm, prioritizing tasks, breaking down the problem, effective communication, and maintaining focus on the solution. Emphasize resilience and problem-solving skills.", "youtube_link": "https://www.youtube.com/watch?v=ezG3B6XhTj0 (Indeed - How do you handle pressure?)"},
            {"q": "Describe a time you failed or made a mistake. What did you learn?", "a": "Choose a genuine, but not catastrophic, mistake. Focus on what you learned and how you grew from the experience. Use the STAR method: describe the Situation, the Task, your Action (the mistake), and most importantly, the Result of your learning and how you applied it to future situations to avoid similar errors. Show self-awareness and a growth mindset.", "youtube_link": "https://www.youtube.com/watch?v=R2j9G20Q4_8 (CareerVidz - Tell me about a time you failed)"},
            {"q": "Do you have any questions for me?", "a": "Always have questions prepared! This demonstrates your engagement, interest, and critical thinking. Ask about the team culture, typical day-to-day responsibilities, biggest challenges for the team/role, professional development opportunities, or the next steps in the hiring process. Avoid asking about salary or benefits in the first interview.", "youtube_link": "https://www.youtube.com/watch?v=F3zW6iFjJ6I (Indeed - Questions to Ask the Interviewer)"},
            {"q": "How do you stay updated with industry trends?", "a": "Mention specific ways you stay current: reading industry blogs/publications (e.g., Medium, Hacker News), following thought leaders on LinkedIn/Twitter, attending webinars/conferences, taking online courses, participating in developer communities, side projects, etc. This shows your passion for continuous learning.", "youtube_link": "https://www.youtube.com/watch?v=Uszj_k0DGSE (CareerVidz - How do you stay current?)"}
        ]
    }
}